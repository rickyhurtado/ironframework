// init.controller.min.js v1.0
define(["category_model","contacts_model","contacts_business_model","settings_module","collection_library"],function(f,g,h){return Backbone.Controller.extend({initialize:function(){console.log("Backbone.Controller.InitController has been initialized.");this.settings=I.Settings.Controller;this.settings.update({setting:"storage_cache_time",value:1});this.settings.update({setting:"cache_time_type",value:"hour"});console.log(this.settings.models());this.options.models.category=f;this.options.models.contacts= g;this.options.models.contacts_business=h;this.options.collections.category=I.Init.Collections.Category;this.options.collections.contacts=I.Init.Collections.Contacts;this.options.collections.contacts_business=I.Init.Collections.ContactsBusiness},options:{sync_url:I.BaseURL+"/data/json.php?data=sync",cache_time_type:"second",models:{},collections:{},json_data:{}},syncData:function(){var b=this,a=this.settings.get("auto_sync_data"),c=this.settings.get("sync_data_in_process"),d=this.settings.get("sync_data_on_page_load"); if(a||d)b.checkSyncStatus()&&(d||c)&&b.syncLocalStorage(),a&&setInterval(function(){b.checkSyncStatus()&&b.syncLocalStorage()},1E4)},checkSyncStatus:function(){var b=parseInt((new Date).getTime()/1E3),a=this.settings.get("storage_cache_time"),c=this.settings.get("cache_time_type"),d=this.settings.get("date_time_synced"),e=1;switch(c){case "hour":case "minute":e=60}return b-d>=a*e},callbackProcess:function(b){b()},checkSyncingProcess:function(b){var a=this,c;a.settings.get("sync_data_in_process")? (console.log("Syncing remote data is in process..."),c=setInterval(function(){console.log(a.settings.get("sync_data_in_process"));a.settings.get("sync_data_in_process")||(a.settings.update({setting:"sync_data_in_process",value:!1}),a.callbackProcess(b),clearInterval(c),console.log("Syncing remote data has been completed."))},100)):a.callbackProcess(b)},syncLocalStorage:function(){var b=this,a=b.options;this.settings.update({setting:"sync_data_in_process",value:!0});console.log("Fetching the remote data..."); I.Library.Collection.sync({models:a.models,collections:a.collections,url:a.sync_url,data:a.json_data,success:function(a){console.log("Fetching remote data is successful!");console.log(a);b.settings.update({setting:"sync_data_in_process",value:!1});b.settings.update({setting:"date_time_synced",value:parseInt((new Date).getTime()/1E3)})},error:function(){console.log("Fetching data from live server failed!")}})}})});